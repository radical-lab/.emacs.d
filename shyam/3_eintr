printf \\ec;emacs -nw --no-splash --eval='(info "eintr")'

PREFACE: PREFACE

ON READING THIS TEXT: ON READING THIS TEXT
M-. ; xref-find-definitions is apparently useful, but remains a mystery…

WHO YOU ARE: FOR WHOM THIS IS WRITTEN
"Say everything three times; introduce it, then show it in a contextual example, then review it. #magic" ; #tags are `sh` comments, right?

LISP HISTORY: LISP HISTORY
"Lisp was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence."
"The great power of the Lisp language makes it superior for other purposes as well, such as writing editor commands and integrated environments."
"(The standard Emacs distribution contains an optional extensions file, `cl.el`, that adds many Common Lisp features to Emacs Lisp.)"

NOTE FOR NOVICES: A NOTE FOR NOVICES
M-C-\ ; indent-region
C-u ; universal argument

LIST PROCESSING: 1 LIST PROCESSING

"Lots of Isolated Silly Parentheses" ; I think it's easier to sell ((lisp)) as an extra curvy superspecies of python() with its' large intestine gutted; it even "loops" too!
"LISt Processing" ; Lisp Is Symbolic Programming!!! :D

LISP LISTS: 1.1 LISP LISTS
; lisp can't goto parameters (treating them as functions), like machine instructions, but shyamscript is the best of both worlds
; lisp can't evaluate all procedure calls, like machine instructions, but shyamscript is the best of both worlds
; atom = indivisible; physics's wrong about atoms!
; sub-atomic particles = bitcodes ∘ bytecodes
; s-forms
; parametric namespace ideas: atom, symbol, abstraction,.. (the more general, the more universally applicable; lisp is about abstraction, not specification)
; i like to think of /numbers|.*/ as symbols
; C-n is next-line not forward-line
; (lists) "strings" symbols 1111011 ; [vectors] . grawlixes
; Lisp Interaction mode, and Emacs Lisp mode
\t ; supposedly indents a line by "the right amount" #subjective
M-C-\ ; supposedly indents a region "properly" #subjectivity

RUN A PROGRAM: 1.2 RUN A PROGRAM
; lisp can't goto parameters (treating them as functions), like machine instructions, but shyamscript is the best of both worlds
; lisp can't evaluate all procedure calls, like machine instructions, but shyamscript is the best of both worlds
C-x C-e ; C-j in info mode, but outputs in the minibuffer echo area instead of *scratch*
; i'm assuming (#o4, #x4, ?\C-d) is octal, and hex, and no binary, but what is ?\C-d?
; Lisp interpreter, from human language interpretation by a human
; ---------- Footnotes ---------- (1) Emacs shows integer values in decimal, in octal and in hex, and also as a character, but let’s ignore this convenience feature for now.
; so ?\C-d is the character representation of 4? i thought they were all control codes, closer to the point of origin
; oh, abcd; so it's the $d^{th}$ control code, but there are actually unicodes for at least some of them

MAKING ERRORS: 1.3 GENERATE AN ERROR MESSAGE
; error messages = help messages
q ; escape the debugger, but i always just C-x k, and C-g never worked
; backtrace is backwards, so just imagine the reverse of prolog `trace.`? the imagination is either nightmarishly complicated to traverse, or infinitely useless
; to me atoms are /representational|specific/, and symbols are /abstract|general/, where atoms are a subset of symbols; not the other way around
; a function is like a generalised template that can be applied to heterogeneous parameters; i hate hello world programs ∵ they do not demonstrate the true power of programming
; n deeply nested compositions = [n,श्याम) lines of backtrace; it's a trivial pursuit to render backtrace useless #foretrace_ftw

NAMES & DEFINITIONS: 1.4 SYMBOL NAMES AND FUNCTION DEFINITIONS

Since Emacs Lisp is large, it is customary to name symbols in a way that identifies the part of Emacs to which the function belongs. Thus, all the names for functions that deal with Texinfo start with /texinfo-/ and those for functions that deal with reading mail start with /rmail-/.

LISP INTERPRETER: 1.5 THE LISP INTERPRETER
'(list)
(function)
(err)
; complications: symbols (variables), special forms (defun,if,..), macros (preprocessed metaprogramming,when,defun,..), nested lists
; Otherwise, the interpreter works left to right, from one expression to the next.
; but working backwards could save time; tdd, declarative, logical, intelligent,..
; byte-compile is a bastardisation∘lisp; it wouldn't be so bad if it didn't interfere c̄ symbol-function
byte-compile-file ; <file.el >file.elc

EVALUATION: 1.6 EVALUATION
; iprefer s/eval/proc/, from p(i)=o; instead of eval(expression)=value
; sfx = move a cursor, copy a file, printing results
C-x C-e ; eval-last-sexp

VARIABLES: 1.7 VARIABLES

; variables are symbols that are constant functions, but are not functions; which makes them incomputable
; symbols are object oriented, but only have one variable, and one function, each (both unbounded by default; /f?boundp/ says if its' warranty is voided); kind of like arrays in sh, compared to bash
; binding the bounds of a symbol
(symbol-function (fset 'f (symbol-value 'f))); f is symbol-function, but (f) is symbol-value
C-x k ; q ; escape from the *Backtrace* buffer, (void-function f) versus (void-variable x)
(fset 'f (lambda (x) (set 'f x) f)); superpositional symbols are their' own setter, and getter
(fset 'f (lambda (x) (set 'f (symbol-function 'f)) (byte-compile 'f) x)); f is symbol-function, but (f) is symbol-value
(fset 'f (lambda () (set 'f (symbol-function 'f)) (fset 'f (lambda (x) (set 'f f) (byte-compile 'f) x)))); this one works better
(fset 'f (lambda (y) (set 'f (symbol-function 'f)) (fset 'f (lambda (x) (set 'f f) (byte-compile 'f) x)) (f y))); this one works best
; I reject your reality and substitute my own. -- Adam, the Savage caveman from the garden of eden, who busted the myth that he has an apple stuck half way down his throat

ARGUMENTS: 1.8 ARGUMENTS

; passing /e?valuable (symbolic|atomic|listed|quoted)/ arguments to functions
; a symbol CAN have two different function definitions at the same time!
; so strings are atomic? not just a list of characterisations?
; zero arity math functions return the identity
; /.*p/() are predicates, but null() is not for obvious reasons; even though it is (like an undocumented feature; self-documenting code)
; message() is so useful, and it will goto the echo area, and the *Messages* buffer, in toto (i thought it was a mistake, but the /html|pdf/ manuals are obvious)
; unquoted output is a side-effect!
; message() supports /%(s|d)/, but %s supports %d, and %d 

SET & SETQ: 1.9 SETTING THE VALUE OF A VARIABLE

printf \\ec;emacs -nw --no-splash --eval='(info "(eintr)set & setq")'

; i want a STOP to preprocess into the remaining closing parentheses to balance it all out up to that point, ignoring the rest of the sauce #cookbook
; symbol manipulation is to lisp what unification is to prolog; more powerful abstractions, where lisp is a subset of prolog, in that they are both support symbolic programming, and my self-assessment (whatever that means) is much higher for lisp than prolog https://github.com/Dobiasd/articles/blob/master/programming_language_learning_curves.md