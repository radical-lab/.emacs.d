printf \\ec;emacs -nw --no-splash --eval='(info "eintr")'

PREFACE: PREFACE

ON READING THIS TEXT: ON READING THIS TEXT
M-. ; xref-find-definitions is apparently useful, but remains a mystery…

WHO YOU ARE: FOR WHOM THIS IS WRITTEN
"Say everything three times; introduce it, then show it in a contextual example, then review it. #magic" ; #tags are `sh` comments, right?

LISP HISTORY: LISP HISTORY
"Lisp was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence."
"The great power of the Lisp language makes it superior for other purposes as well, such as writing editor commands and integrated environments."
"(The standard Emacs distribution contains an optional extensions file, `cl.el`, that adds many Common Lisp features to Emacs Lisp.)"

NOTE FOR NOVICES: A NOTE FOR NOVICES
M-C-\ ; indent-region
C-u ; universal argument

LIST PROCESSING: 1 LIST PROCESSING

"Lots of Isolated Silly Parentheses" ; I think it's easier to sell ((lisp)) as an extra curvy superspecies of python() with its' large intestine gutted; it even "loops" too!
"LISt Processing" ; Lisp Is Symbolic Programming!!! :D

LISP LISTS: 1.1 LISP LISTS
; lisp can't goto parameters (treating them as functions), like machine instructions, but shyamscript is the best of both worlds
; lisp can't evaluate all procedure calls, like machine instructions, but shyamscript is the best of both worlds
; atom = indivisible; physics's wrong about atoms!
; sub-atomic particles = bitcodes ∘ bytecodes
; s-forms
; parametric namespace ideas: atom, symbol, abstraction,.. (the more general, the more universally applicable; lisp is about abstraction, not specification)
; i like to think of /numbers|.*/ as symbols
; C-n is next-line not forward-line
; (lists) "strings" symbols 1111011 ; [vectors] . grawlixes
; Lisp Interaction mode, and Emacs Lisp mode
\t ; supposedly indents a line by "the right amount" #subjective
M-C-\ ; supposedly indents a region "properly" #subjectivity

RUN A PROGRAM: 1.2 RUN A PROGRAM
; lisp can't goto parameters (treating them as functions), like machine instructions, but shyamscript is the best of both worlds
; lisp can't evaluate all procedure calls, like machine instructions, but shyamscript is the best of both worlds
C-x C-e ; C-j in info mode, but outputs in the minibuffer echo area instead of *scratch*
; i'm assuming (#o4, #x4, ?\C-d) is octal, and hex, and no binary, but what is ?\C-d?
; Lisp interpreter, from human language interpretation by a human
; ---------- Footnotes ---------- (1) Emacs shows integer values in decimal, in octal and in hex, and also as a character, but let’s ignore this convenience feature for now.
; so ?\C-d is the character representation of 4? i thought they were all control codes, closer to the point of origin
; oh, abcd; so it's the $d^{th}$ control code, but there are actually unicodes for at least some of them

MAKING ERRORS: 1.3 GENERATE AN ERROR MESSAGE
; error messages = help messages
q ; escape the debugger, but i always just C-x k, and C-g never worked
; backtrace is backwards, so just imagine the reverse of prolog `trace.`? the imagination is either nightmarishly complicated to traverse, or infinitely useless
; to me atoms are /representational|specific/, and symbols are /abstract|general/, where atoms are a subset of symbols; not the other way around
; a function is like a generalised template that can be applied to heterogeneous parameters; i hate hello world programs ∵ they do not demonstrate the true power of programming
; n deeply nested compositions = [n,श्याम) lines of backtrace; it's a trivial pursuit to render backtrace useless #foretrace_ftw

NAMES & DEFINITIONS: 1.4 SYMBOL NAMES AND FUNCTION DEFINITIONS

Since Emacs Lisp is large, it is customary to name symbols in a way that identifies the part of Emacs to which the function belongs. Thus, all the names for functions that deal with Texinfo start with /texinfo-/ and those for functions that deal with reading mail start with /rmail-/.

LISP INTERPRETER: 1.5 THE LISP INTERPRETER
'(list)
(function)
(err)
; complications: symbols (variables), special forms (defun,if,..), macros (preprocessed metaprogramming,when,defun,..), nested lists
; Otherwise, the interpreter works left to right, from one expression to the next.
; but working backwards could save time; tdd, declarative, logical, intelligent,..
; byte-compile is a bastardisation∘lisp; it wouldn't be so bad if it didn't interfere c̄ symbol-function
byte-compile-file ; <file.el >file.elc

EVALUATION: 1.6 EVALUATION
; iprefer s/eval/proc/, from p(i)=o; instead of eval(expression)=value
; sfx = move a cursor, copy a file, printing results
C-x C-e ; eval-last-sexp

VARIABLES: 1.7 VARIABLES

; variables are symbols that are constant functions, but are not functions; which makes them incomputable
; symbols are object oriented, but only have one variable, and one function, each (both unbounded by default; /f?boundp/ says if its' warranty is voided); kind of like arrays in sh, compared to bash
; binding the bounds of a symbol
(symbol-function (fset 'f (symbol-value 'f))); f is symbol-function, but (f) is symbol-value
C-x k ; q ; escape from the *Backtrace* buffer, (void-function f) versus (void-variable x)
(fset 'f (lambda (x) (set 'f x) f)); superpositional symbols are their' own setter, and getter
(fset 'f (lambda (x) (set 'f (symbol-function 'f)) (byte-compile 'f) x)); f is symbol-function, but (f) is symbol-value
(fset 'f (lambda () (set 'f (symbol-function 'f)) (fset 'f (lambda (x) (set 'f f) (byte-compile 'f) x)))); this one works better
(fset 'f (lambda (y) (set 'f (symbol-function 'f)) (fset 'f (lambda (x) (byte-compile 'f) x)) (f y))); this one works best
(fset 'f (lambda (y) (fset 'f (lambda (x) x)) (set 'f (symbol-function 'f)) (byte-compile 'f) (f y))); this one is optimised, and caches the prime program ™
(fset 'f (lambda (y) (set 'f (symbol-function 'f)) (fset 'f (lambda (x) x)) (byte-compile 'f) (f y))); this one is optimised, and caches the metaprogram
(fset 'declare (lambda (f y) (fset f y) (set f (symbol-function f)) (byte-compile f) (symbol-value f))); this one has a generalised higher order, and caches the prime program ™
; I reject your reality and substitute my own. -- Adam, the Savage caveman from the garden of eden, who busted the myth that he has an apple stuck half way down his throat

ARGUMENTS: 1.8 ARGUMENTS

; passing /e?valuable (symbolic|atomic|listed|quoted)/ arguments to functions
; a symbol CAN have two different function definitions at the same time!
; so strings are atomic? not just a list of characterisations?
; zero arity math functions return the identity
; /.*p/() are predicates, but null() is not for obvious reasons; even though it is (like an undocumented feature; self-documenting code)
; message() is so useful, and it will goto the echo area, and the *Messages* buffer, in toto (i thought it was a mistake, but the /html|pdf/ manuals are obvious)
; unquoted output is a side-effect!
; message() supports /%(s|d)/, but %s supports %d, and %d does "-thing"s

SET & SETQ: 1.9 SETTING THE VALUE OF A VARIABLE

set()
setq()
let()
; to bind a symbolic variable to a value, or to bind a value to a symbolic variable? that is the query
(set 'flowers '(rose violet daisy buttercup)); The list ‘(rose violet daisy buttercup)’ will appear in the echo area. This is what is _returned_ by the ‘set’ function.  As a side effect, the symbol ‘flowers’ is bound to the list; that is, the symbol ‘flowers’, which can be viewed as a variable, is given the list as its value. (This process, by the way, illustrates how a side effect to the Lisp interpreter, setting the value, can be the primary effect that we humans are interested in.  This is because every Lisp function must return a value if it does not get an error, but it will only have a side effect if it is designed to have one.)
(setq trees '(pine fir oak maple) herbivores '(gazelle antelope zebra)) ; setq autoquotes, and can multitask
; Although I have been using the term “assign”, there is another way of thinking about the workings of ‘set’ and ‘setq’; and that is to say that ‘set’ and ‘setq’ make the symbol _point_ to the list.  This latter way of thinking is very common and in forthcoming chapters we shall come upon at least one symbol that has “pointer” as part of its name.  The name is chosen because the symbol has a value, specifically a list, attached to it; or, expressed another way, the symbol is set to point to the list.
(setq counter 0)                ; Let’s call this the initializer.
(setq counter (+ counter 1))    ; This is the incrementer. (you have to evaluate it multiple times, but it can be automated; a couple sections ago, as a self-modifying /function|object/; metaprogramming ftw)
counter                         ; This is the counter.
(let setq() f() g() h()) ; why is this not included? it didn't even get a goto hyperlink! nobody uses it anyway…

SUMMARY: 1.10 SUMMARY

Any list in Lisp is a program ready to run.
 • Lisp programs are made up of expressions, which are lists or singleton atoms.
 • Lists are made up of zero or more atoms or /inner|nested/ lists, separated by whitespace and surrounded by parentheses.  A list can be empty.
 • Atoms are multi-character symbols, like ‘forward-paragraph’, single character symbols like ‘+’, strings of characters between double quotation marks, or numbers.
 • A number evaluates to itself.
 • A string between double quotes also evaluates to itself.
 • When you evaluate a symbol by itself, its value is returned.
 • When you evaluate a list, the Lisp interpreter looks at the first symbol in the list and then at the function definition bound to that symbol.  Then the instructions in the function definition are carried out.
 • A single-quote ‘'’ tells the Lisp interpreter that it should return the following expression as written, and not evaluate it as it would if the quote were not there.
 • Arguments are the information passed to a function.  The arguments to a function are computed by evaluating the rest of the elements of the list of which the function is the first element.
 • A function always returns a value when it is evaluated (unless it gets an error); in addition, it may also carry out some action that is a side effect.  In many cases, a function’s primary purpose is to create a side effect.
idk what sfx even are anymore

ERROR MESSAGE EXERCISES: 1.11 EXERCISES

how can you generate an error if the symbol is appropriate?
 • Generate an error message by evaluating an appropriate symbol that is not within parentheses.
void-variable
 • Generate an error message by evaluating an appropriate symbol that is between parentheses.
(void-function)
 • Create a counter that increments by two rather than one.
(fset 'f (lambda (x) (if (not (boundp 'f)) (set 'f x)) (fset 'f (lambda () (set 'f (+ f 2))))))
 • Write an expression that prints a message in the echo area when evaluated.
(message "%s" ((lambda () (if (boundp 'f) (f) (f 3)) f)))

PRACTICING EVALUATION: 2 PRACTICING EVALUATION

HOW TO EVALUATE: HOW TO EVALUATE

; i never thought to /C-h k ./ for self-insert-command()
; interactive commands are the functions evaluated by typing keystrokes
C-x C-e ; evaluate elisp outside of the appropriate contextual buffer (message() goto echo area, and *Messages* buffer), actually this also works in the *scratch* buffer
C-j ; evaluate elisp inside of the appropriate contextual buffer (between the elisp /instructions?/ followed by \n, and the point), but this doesn't work outside of the *scratch* buffer
C-u C-x C-e ; C-j \b (no \n), but contextually C-x C-e

BUFFER NAMES: 2.1 BUFFER NAMES

; apparently there is a difference between buffers (ram), and files (drive)
(buffer-name) ; the name of the buffer appears in the echo area (same as name of file)
(buffer-file-name) ; the full path-name of the file to which the buffer refers appears in the echo area
; wiki.texinfo
; The symbol ‘nil’ is from the Latin word for “nothing”. In Lisp, ‘nil’ is also used to mean “false” and is a synonym for the empty list, ‘()’.
; the computer is only as intelligent as the person who hacked it together
; The word “buffer”, by the way, comes from the meaning of the word as a cushion that deadens the force of a collision.  In early computers, a buffer cushioned the interaction between files and the computer’s central processing unit.  The drums or tapes that held a file and the central processing unit were pieces of equipment that were very different from each other, working at their own speeds, in spurts.  The buffer made it possible for them to work together effectively. Eventually, the buffer grew from being an intermediary, a temporary holding place, to being the place where work is done.  This transformation is rather like that of a small seaport that grew into a great city: once it was merely the place where cargo was warehoused temporarily before being loaded onto ships; then it became a business and cultural center in its own right.
\s ; at the splash screen, doesn't goto the *scratch* buffer
C-u C-x C-e ; i also put it in the preceding section

GETTING BUFFERS: 2.2 GETTING BUFFERS

(current-buffer) ; on point
(other-buffer) ; not in a /window|frame/

SWITCHING BUFFERS: 2.3 SWITCHING BUFFERS

; buffer is not a filestring
(switch-to-buffer (other-buffer)) ; switch to most recent invisible buffer
(switch-to-buffer (other-buffer (current-buffer) t)) ; switch to most recent buffer, regardless of visibility
C-x o ; other-window ; cycle through visible buffers

C-x b ; switch-to-buffer ; by name, or buffer functions
C-f   ; forward-char
M-e   ; forward-sentence
x     ; self-insert-command
\r    ; newline (\r is return, \n is newline; i return as programs return ∵ i am a 3-bit computer)

set-buffer() ; more common than switch-to-buffer(), probably because it is like putting a cd into a shcript versus putting a cd into a shell

; Also, we have just introduced another jargon term, the word “call”. When you evaluate a list in which the first symbol is a function, you are calling that function.  The use of the term comes from the notion of the function as an entity that can do something for you if you call it; just as a plumber is an entity who can fix a leak if you call him or her.
; spacetime resources are the currency you use to pay per call (no "free" calls)
(lambda (x) x) ; can be a free call, but it depends who your service provider is
; is it a free call if you call the user? the program is timeless, so the time is charged to the /usr/bill/, but the user can always put it in their /usr/bin/ if they want

BUFFER SIZE & LOCATIONS: 2.4 BUFFER SIZE AND THE LOCATION OF POINT

(buffer-size) ; global head count, but not sure about unicode support
(point-min) ; local minimum, where narrowing means not always 1
(point) ; global position, where calculus applies
(point-max) ; local maximum, where narrowing means not always global maximum buffer-size()

EVALUATION EXERCISE: 2.5 EXERCISE

(buffer-name) ; buffer name
(buffer-file-name) ; file name
(buffer-size) ; length
(point) ; position

WRITING DEFUNS: 3 HOW TO WRITE FUNCTION DEFINITIONS

; symbols are function pointers

PRIMITIVE FUNCTIONS: AN ASIDE ABOUT PRIMITIVE FUNCTIONS

; there are only a few primitive c functions
; you DO distinguish between c functions, and elisp functions, which is NOT irrelevant ∵ c functions are not meta

DEFUN: 3.1 THE ‘DEFUN’ MACRO

mark-whole-buffer
(defun
	namespace ; self-documenting symbol
	(a r g u m e n t s) ; "argument list"
	"docstring"
	(interactive api)
	((a (r) g (u) (m e n) t s… - --- .--.
(defun multiply-by-seven (multiplicand)
	"Multiply FOOGLE by seven."
	(* 7 multiplicand))
C-h f ; describe-function() using docstring
apropos() ; first line of docstring

INSTALL: 3.2 INSTALL A FUNCTION DEFINITION

(defun multiply-by-seven (multiplicand) ; second version
	"Multiply FOOGLE by seven."
	(+ multiplicand multiplicand multiplicand multiplicand multiplicand multiplicand multiplicand))
; docstrings should capitalise on the arguments ∵ `C-h f` capitalises on the arguments; there is no other reason ∴ prolog is superior, since prolog always capitalises on the variables #iprefer
; redeclaring functions is easier in lisp, than prolog…
; In summary, this is how you write code in Emacs Lisp: you write a function; install it; test it; and then make fixes or enhancements and install it again.

INTERACTIVE: 3.3 MAKE A FUNCTION INTERACTIVE

(interactive) ; special form that makes a declaration usable from M-x, and boundable
C-h k C-g ; ⸘does not escape‽
(message "hello echo area") ; interactive functions don't automagically `exit;echo $?`
(defun multiply-by-seven (multiplicand) ; interactive version
	"Multiply FOOGLE by seven."
	(interactive "p") ; prefix argument
	(message "7×%d=%d" multiplicand (* 7 multiplicand)))
C-u 3 M-x multiply-by-seven
; prefix arguments are either C-u 108, or M-108, but my terminal pwnz M-108
((lambda () (message "hello echo area")))
(progn (message "hello echo area"))
; does not seem to remove quotes unless called interactively
; side effects have no quotes, and idk what side effects even are anymore…

INTERACTIVE OPTIONS: 3.4 DIFFERENT OPTIONS FOR ‘INTERACTIVE’

printf \\ec;emacs -nw --no-splash --eval='(info "(eintr) Interactive Options")'

; i want a STOP to preprocess into the remaining closing parentheses to balance it all out up to that point, ignoring the rest of the sauce #cookbook
; symbol manipulation is to lisp what unification is to prolog; more powerful abstractions, where lisp is a subset of prolog, in that they are both support symbolic programming, and my self-assessment (whatever that means) is much higher for lisp than prolog https://github.com/Dobiasd/articles/blob/master/programming_language_learning_curves.md
=(X,X). % assuming unification is =/2, and prolog comments are percentages
; sentences are /\.\s\s/ for A.C.R.O.N.Y.M.S. #O.M.F.G. #W.T.F.