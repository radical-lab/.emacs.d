printf \\ec;emacs -nw --no-splash --eval='(help-with-tutorial)'

/C-./ ; controlled commands
/M-./ ; /\e ./ ; /alternative|altered/ commands

C-x C-c ; \e
C-g ; vim \e
C-x k ; kill buffer

SUMMARY

C-v ; page down
M-v ; page up
C-l ; redraw garbage line noise, and cycle /middle|top|bottom/ vertical alignment, but the C-h k C-l does not mention redrawing

BASIC CURSOR CONTROL

; why are they using \t for ascii art‽ this is so stupid …need an ascii art macro that uses tab-width to s/(\s+)/\,(f \1 "\t")/

; Very often Meta characters are used for operations related to the units defined by language (words, sentences, paragraphs), while Control characters operate on basic units that are independent of what you are editing (characters, lines, etc).
C-b ; back char
C-n ; next line
C-p ; prev line
C-f ; fore char
M-b ; back word
M-f ; fore word
C-a ; back \r\n (ReturN) https://stackoverflow.com/a/6539810
C-e ; fore \r\n (ReturN) https://stackoverflow.com/a/6539810
M-a ; back sent
M-e ; fore sent
M-< ; init file (/born|head/ /buff/)
M-> ; stop file (/dead|tail/ /buff/)
; this would be more consistent, and mnemonical
; could /c-(a|z)/ for chars, /(r|n)-(a|z)/ for /\r|\n/, /l-(a|z)/ for lines (/^|$/), /f-(a|z)/ for files (/^|$/), /w-(a|z)/ for words (/\s/), /s-(a|z)/ for sentences (/\.\s/), /p-(a|z)/ for paragraphs (/\n\n/),..
; s/a/s/, s/z/e/, for eof,..
; s/a/h/, s/z/t/, for heads, or tails?
; /l-(a|z)/ twice should jump lines (maybe warn like /C-(s|r)/) …warning with s/(a)n/\1/ sound (awooga awooga awooga)
; scrolling versus paging is just a matter of speed, so in games shifting is usually slower; /(S-)?.-(a|z)/, where that dot is /./ not /\./, since it can be applied to every"-thing", and just have /((C-u)+ \d*)?(S-)?m-(a|z)/, where s/m/move/

; universal-argument
/C-u \d* ./ ; repetition, or ¿temporary? behaviour modification (social engineering)
/M-\d* ./   ; /C-u \d* ./
/(C-u)* ./  ; (λx./C-u 4ˣ ./)

IF EMACS STOPS RESPONDING

C-g ; vim \e

DISABLED COMMANDS

C-x C-l; disabled command

WINDOWS

C-x 1 ; One window (i.e., kill all other windows)
; There is a whole series of commands that start with C-x; many of them have to do with windows, files, buffers, and related things. These commands are two, three or four characters long.

INSERTING AND DELETING

; just type normally to insert; like notepad,..
; i hate the backslash continuation line, and i hate the padded spaces; just print lines normally, and use $WIDTH, and $HEIGHT, (or whatever they're called) for the math; i hate copying text only to discover there is an abundance of space
/\r|\n|\r\n/ ; conductive boogaloo
/C-u \d (\r|\n|\r\n)/ ; is insulated
\b   ; delete-backward-char
C-d  ; delete-char
M-\b ; backward-kill-word
M-d  ; kill-word
C-k  ; kill-line
M-k  ; kill-sentence
C-w  ; kill-region
M-w  ; kill-ring-save (why didn't they include this one?)
C-y  ; yank (reuse clones)
M-y  ; yank-pop (cycles the cyclic kill ring) (depends on /yank(-pop)?/; useful to know for modal hacking)
; text has soul
; killing supports reincarnation (yanked back from the future), but deleting is a matter ∘ antimatter; all can be undone
; Generally, the commands that can remove a lot of text kill the text (they are set up so that you can yank the text), while the commands that remove just one character, or only remove blank lines and spaces, do deletion (so you cannot yank that text).  <DEL> and C-d do deletion in the simplest case, with no argument.  When given an argument, they kill instead.
; Some other editors call killing and yanking "cutting" and "pasting" (see the Glossary in the Emacs manual).
; If you do several C-k's in a row, all of the killed text is saved together, so that one C-y will yank all of the lines at once.
; ^ this means the kill ring is hackable

UNDO

/C-(_|\/|x u)/
; A numeric argument to undo acts as a repeat count; otherwise use it incrementally.
; But there are two exceptions: commands that do not change the text don't count (this includes cursor motion commands and scrolling commands), and self-inserting characters are usually handled in groups of up to 20.  (This is to reduce the number of C-_'s you have to type to undo insertion of text.)
; undo considers both the kill ring, and the delete ring; unlike yanking
; (C-g toggles between undo, and redo; oh, this is still just the tutorial)

FILES

C-x C-f /.+/ ; find-file ;  /(find|visit)(ing)?( a)? file/, the command reads the argument
C-x C-s ; save-buffer ; save the file (¿leaving the file?)

BUFFERS

C-x C-b ; list-buffers ; includes crm, name, size, mode, file
C-x 1 ; delete-other-windows
C-x C-f /.+/ ; switches to file buffers, even if they already exist
C-x b ; switch-to-buffer
C-x s ; save-some-buffers ; doesn't save all buffers (*scratch*, *Messages*, *Help*), but saves modified file-visiting buffers

EXTENDING THE COMMAND SET

; /e(X)tend/ command
C-x ; Character eXtend. Followed by one character.
M-x ; Named command eXtend. Followed by a long name.

C-z ; C-x C-z ; suspend-frame
$ fg ; $ %emacs ; resume

C-x C-f ; find-file
C-x C-s ; save-buffer
C-x s   ; save-some-buffers
C-x C-b ; list-buffers
C-x b   ; switch-to-buffer
C-x C-c ; save-buffers-kill-terminal
C-x 1   ; delete-other-windows
C-x u   ; undo

M-x replace-string

AUTO SAVE

M-: (recover-this-file) ; M-x recover-this-file ; When it asks FO confirmation, type yes
; #files# show up while using emacs, so i would rather save them in .emacs.d/
; just make sure to C-x C-s ** to -- after editing, and before switching /buffers|windows/

ECHO AREA

; the minibuffer when it is used to echo like a keylogger

MODE LINE

; mode line (one per window/buffer)
; echo area / miniature buffer (one per frame)
;
; mode line: '-:**- 'unsaved_file_name /\d\d%|Top|All|Bot/ /L(OC)?\d+/ '(mode_name)
; mode line: '-:---   'saved_file_name /\d\d%|Top|All|Bot/ /L(OC)?\d+/ '(mode_name)
;
; major modes: fundamental-mode, lisp-mode, text-mode,..
; Each major mode is the name of an extended command, which is how you can switch to that mode.  For example, M-x fundamental-mode is a command to switch to Fundamental mode.
M-x text-mode ; Don't PANIC, none of the Emacs commands you have learned changes in any great way.  But you can observe that M-f and M-b now treat apostrophes as part of words.  Previously, in Fundamental mode, M-f and M-b treated apostrophes as word-separators.
; Major modes usually make subtle changes like that one: most commands do "the same job" in each major mode, but they work a little bit differently.
C-h m ; view documentation on your current major mode
; >> Move the cursor to the line following this line.
; >> Type C-l C-l to bring this line to the top of screen.
; >> Type C-h m, to see how Text mode differs from Fundamental mode.
; >> Type C-x 1 to remove the documentation from the screen.
; Major modes are called major because there are also minor modes. Minor modes are not alternatives to the major modes, just minor modifications of them.  Each minor mode can be turned on or off by itself, independent of all other minor modes, and independent of your major mode.  So you can use no minor modes, or one minor mode, or any combination of several minor modes.
; One minor mode which is very useful, especially for editing human-language text, is Auto Fill mode.  When this mode is on, Emacs breaks the line in between words automatically whenever you insert text and make a line that is too wide.
; You can turn Auto Fill mode on by doing M-x auto-fill-mode <Return>. When the mode is on, you can turn it off again by doing M-x auto-fill-mode <Return>.  If the mode is off, this command turns it on, and if the mode is on, this command turns it off.  We say that the command "toggles the mode".
M-x auto-fill-mode ; is not a good mode
; The margin is usually set at 70 characters, but you can change it with the C-x f command.  You should give the margin setting you want as a numeric argument.
C-u 20 C-x f ; only works for auto-fill-mode
; If you make changes in the middle of a paragraph, Auto Fill mode does not re-fill it for you. To re-fill the paragraph, type M-q (META-q) with the cursor inside that paragraph.

SEARCHING

; Searching for a string is a cursor motion command; it moves the cursor to the next place where that string appears.
; The Emacs search command is "incremental".  This means that the search happens while you type in the string to search for.
C-s ; forward search
C-r ; reverse search
; When you type C-s you'll notice that the string "I-search" appears as a prompt in the echo area.  This tells you that Emacs is in what is called an incremental search waiting for you to type the thing that you want to search for.
; Emacs, in an incremental search, tries to go to the occurrence of the string that you've typed out so far.  To go to the next occurrence of "cursor" just type C-s again.  If no such occurrence exists, Emacs beeps and tells you the search is currently "failing".  C-g would also terminate the search.
; If you are in the middle of an incremental search and type <DEL>, the search "retreats" to an earlier location.  If you type <DEL> just after you had typed C-s to advance to the next occurrence of a search string, the <DEL> moves the cursor back to an earlier occurrence.  If there are no earlier occurrences, the <DEL> erases the last character in the search string.
; If you are in the middle of a search and type a control or meta character (with a few exceptions--characters that are special in a search, such as C-s and C-r), the search is terminated.
; C-s starts a search that looks for any occurrence of the search string AFTER the current cursor position.  If you want to search for something earlier in the text, type C-r instead.  Everything that we have said about C-s also applies to C-r, except that the direction of the search is reversed.
;
; it searches after point so the cursor can be on the first occurance, and the first search may not move the cursor

MULTIPLE WINDOWS

printf \\ec;emacs -nw --no-splash --eval='((lambda () (help-with-tutorial) (goto-line 893) (recenter-top-bottom 0)))'